{"version":3,"sources":["components/Container/Container.module.css","components/Section/Section.module.css","components/Filter/Filter.module.css","components/Spinner/Spinner.module.css","components/ContactForm/ContactForm.module.css","store/contacts/contacts-actions.js","store/contacts/contacts-reducer.js","store/store.js","components/Container/Container.jsx","components/Section/Section.jsx","store/contacts/contacts-selector.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.js","components/Spinner/Spinner.jsx","index.js","components/ContactList/ContactList.module.css"],"names":["module","exports","contactsActions","addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","items","createReducer","actions","state","filter","_","combineReducers","contactsPersistConfig","key","storage","blacklist","configStore","configureStore","reducer","contacts","persistReducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","concat","logger","devTools","process","store","persistor","persistStore","Container","title","children","className","s","container","Section","section","getContacts","getFilter","getVisibleContacts","normalizedFilter","toLowerCase","contact","includes","ContactForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","hendleChenge","e","target","value","reset","onSubmit","preventDefault","map","alert","form","label","type","pattern","required","onChange","input","btn","Filter","ContactList","list","item","text","onClick","App","Spinner","size","box","spinner","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.b16fd361.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2DJ05\",\"title\":\"Container_title__9389E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__39CP-\",\"title\":\"Section_title__3r3aa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__MhJnb\",\"input\":\"Filter_input__35SQ5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"Spinner_box__2XfKj\",\"spinner\":\"Spinner_spinner__s6_Fl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3FDT3\",\"label\":\"ContactForm_label__1JjNg\",\"title\":\"ContactForm_title__1PhNj\",\"input\":\"ContactForm_input__2OTnw\",\"btn\":\"ContactForm_btn__1um4s\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport shortid from 'shortid';\r\n\r\nconst addContact = createAction('contacts/add', ({ name, number }) => ({\r\n  payload: {\r\n    id: shortid.generate(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\nconst deleteContact = createAction('contacts/delete');\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\nconst contactsActions = { addContact, deleteContact, changeFilter };\r\nexport default contactsActions;\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport logger from 'redux-logger';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst configStore = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware({ serializableCheck: false }).concat(logger),\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(configStore);\r\n\r\nconst store = { configStore, persistor };\r\nexport default store;\r\n","import PropTypes from 'prop-types';\r\nimport s from './Container.module.css';\r\n\r\nexport default function Container({ title, children }) {\r\n  return (\r\n    <div className={s.container}>\r\n      {title && <h1 className={s.title}>{title}</h1>}\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nContainer.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport s from './Section.module.css';\r\n\r\nexport default function Section({ title, children }) {\r\n  return (\r\n    <section className={s.section}>\r\n      {title && <h2 className={s.title}>{title}</h2>}\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n","export const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n","import { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getContacts } from 'store/contacts/contacts-selector';\r\nimport contactsActions from 'store/contacts/contacts-actions';\r\nimport s from './ContactForm.module.css';\r\n\r\nexport default function ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const hendleChenge = e => {\r\n    const { name, value } = e.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const hendleSubmite = e => {\r\n    e.preventDefault();\r\n\r\n    contacts.map(contact => contact.name).includes(name)\r\n      ? alert(`${name} is already in contacts.`)\r\n      : dispatch(contactsActions.addContact({ name, number }));\r\n\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={hendleSubmite} className={s.form}>\r\n      <label className={s.label}>\r\n        <p className={s.title}>Name</p>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          value={name}\r\n          onChange={hendleChenge}\r\n          className={s.input}\r\n        />\r\n\r\n        <p className={s.title}>Number</p>\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          value={number}\r\n          onChange={hendleChenge}\r\n          className={s.input}\r\n        />\r\n\r\n        <button className={s.btn}>Add contact</button>\r\n      </label>\r\n    </form>\r\n  );\r\n}\r\n","import { useSelector, useDispatch } from 'react-redux';\r\nimport { getFilter } from 'store/contacts/contacts-selector';\r\nimport contactsActions from 'store/contacts/contacts-actions';\r\nimport s from './Filter.module.css';\r\n\r\nexport default function Filter() {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <label className={s.filter}>\r\n      Find contacts by name:\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        className={s.input}\r\n        onChange={e => dispatch(contactsActions.changeFilter(e.target.value))}\r\n      />\r\n    </label>\r\n  );\r\n}\r\n","import { useSelector, useDispatch } from 'react-redux';\r\nimport { getVisibleContacts } from 'store/contacts/contacts-selector';\r\nimport contactsActions from 'store/contacts/contacts-actions';\r\nimport s from './ContactList.module.css';\r\n\r\nexport default function ContactList() {\r\n  const contacts = useSelector(getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const forDeleteContact = id => dispatch(contactsActions.deleteContact(id));\r\n\r\n  return (\r\n    <ul className={s.list}>\r\n      {contacts.map(contact => (\r\n        <li key={contact.id} className={s.item}>\r\n          <p className={s.text}>{`${contact.name}: ${contact.number}`}</p>\r\n          <button\r\n            type=\"button\"\r\n            className={s.btn}\r\n            onClick={() => forDeleteContact(contact.id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n","import Container from './components/Container/Container';\r\nimport Section from './components/Section/Section';\r\nimport ContactForm from './components/ContactForm/ContactForm';\r\nimport Filter from './components/Filter/Filter';\r\nimport ContactList from './components/ContactList/ContactList';\r\nimport './App.css';\r\n\r\nexport default function App() {\r\n  return (\r\n    <Container title=\"Phonebook\">\r\n      <Section>\r\n        <ContactForm />\r\n      </Section>\r\n\r\n      <Section title=\"Contacts\">\r\n        <Filter />\r\n        <ContactList />\r\n      </Section>\r\n    </Container>\r\n  );\r\n}\r\n","import { ImSpinner } from 'react-icons/im';\r\nimport PropTypes from 'prop-types';\r\nimport s from './Spinner.module.css';\r\n\r\nexport default function Spinner({ size }) {\r\n  return (\r\n    <div className={s.box}>\r\n      <ImSpinner size={size} className={s.spinner} />\r\n    </div>\r\n  );\r\n}\r\n\r\nSpinner.propTypes = {\r\n  size: PropTypes.number.isRequired,\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport store from './store/store';\r\nimport App from './App';\r\nimport Spinner from './components/Spinner/Spinner';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store.configStore}>\r\n      <PersistGate loading={<Spinner size={200} />} persistor={store.persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1EkMu\",\"item\":\"ContactList_item__SMztd\",\"text\":\"ContactList_text__7sXtW\",\"btn\":\"ContactList_btn__1W2J6\"};"],"sourceRoot":""}